# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from sure_tosca.models import NodeTemplateModel
from sure_tosca.models.base_model_ import Model
from sure_tosca import util


class NodeTemplateMapModel(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name=None, node_template=None):  # noqa: E501
        """NodeTemplateMap - a model defined in Swagger

        :param name: The name of this NodeTemplateMap.  # noqa: E501
        :type name: str
        :param node_template: The node_template of this NodeTemplateMap.  # noqa: E501
        :type node_template: NodeTemplate
        """
        self.swagger_types = {
            'name': str,
            'node_template': NodeTemplateModel
        }

        self.attribute_map = {
            'name': 'name',
            'node_template': 'nodeTemplate'
        }

        self._name = name
        self._node_template = node_template

    @classmethod
    def from_dict(cls, dikt):
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NodeTemplateMap of this NodeTemplateMap.  # noqa: E501
        :rtype: NodeTemplateMapModel
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self):
        """Gets the name of this NodeTemplateMap.


        :return: The name of this NodeTemplateMap.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this NodeTemplateMap.


        :param name: The name of this NodeTemplateMap.
        :type name: str
        """

        self._name = name

    @property
    def node_template(self):
        """Gets the node_template of this NodeTemplateMap.


        :return: The node_template of this NodeTemplateMap.
        :rtype: NodeTemplate
        """
        return self._node_template

    @node_template.setter
    def node_template(self, node_template):
        """Sets the node_template of this NodeTemplateMap.


        :param node_template: The node_template of this NodeTemplateMap.
        :type node_template: NodeTemplate
        """

        self._node_template = node_template
